<?php
// $Id: versioncontrol_cvs.install,v 1.31 2009/01/10 14:44:27 jpetso Exp $
/**
 * @file
 * CVS backend for Version Control API - Provides CVS commit information and
 * account management as a pluggable backend.
 *
 * Copyright 2006 by Karthik ("Zen", http://drupal.org/user/21209)
 * Copyright 2006, 2007 by Derek Wright ("dww", http://drupal.org/user/46549)
 * Copyright 2007, 2008, 2009 by Jakob Petsovits ("jpetso", http://drupal.org/user/56020)
 */

/**
 * Implementation of hook_schema().
 */
function versioncontrol_cvs_schema() {
  $schema['versioncontrol_cvs_accounts'] = array(
    'description' => 'This table extends {versioncontrol_accounts} with a CVS password so that the CVS backend is able to export VCS accounts into a passwd file.',
    'fields' => array(
      'uid' => array(
        'description' => 'Foreign key referring to {versioncontrol_accounts}.uid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'repo_id' => array(
        'description' => 'Foreign key referring to {versioncontrol_accounts}.repo_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'password' => array(
        'description' =>
          'The CVS password, encrypted with crypt() which is just the way the passwd file requires it. This way, it\'s safe to store the password in the database as it cannot be recovered from this string.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('uid', 'repo_id'),
  );

  $schema['versioncontrol_cvs_repositories'] = array(
    'description' => 'This table extends {versioncontrol_repositories} with additional properties specific to CVS repositories.',
    'fields' => array(
      'repo_id' => array(
        'description' => 'The repository identifier referring to {versioncontrol_repositories}.repo_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'modules' => array(
        'description' =>
          'A serialized array of path strings (relative to the root directory, without a leading slash) that will be parsed and recorded by the log parser. Normally this will be used to specify modules, but adding more complex paths like "contributions/modules/versioncontrol_cvs" should work just as well. If the whole repository is to be scanned, this column contains an empty serialized array.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'update_method' => array(
        'description' =>
          'Specifies whether the repository is updated via log parsing on cron runs (VERSIONCONTROL_CVS_UPDATE_CRON) or via hook scripts (VERSIONCONTROL_CVS_UPDATE_XCVS). Updating the repository and fetching new commits into the database are the same thing, by the way.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' =>
          'Date/time when the repository was last updated, as Unix timestamp. The CVS backend does not only use this for displaying purposes but also as start date for log parsing. 0 if the repository has never been updated at all.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'run_as_user' => array(
        'description' =>
          'If this is empty, the exported account data will cause server-side CVS to be run with the system user corresponding to the authenticated CVS account name. Otherwise, the exported account data will cause CVS to run as the system user specified by this property.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('repo_id'),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function versioncontrol_cvs_install() {
  // Create tables.
  drupal_install_schema('versioncontrol_cvs');
}

/**
 * Implementation of hook_uninstall().
 */
function versioncontrol_cvs_uninstall() {
  // Make sure we can access the required functions even from the .install file.
  include_once(drupal_get_path('module', 'versioncontrol') .'/versioncontrol.module');
  include_once(drupal_get_path('module', 'versioncontrol_cvs') .'/versioncontrol_cvs.module');

  if (db_table_exists('versioncontrol_repositories')) {
    $result = db_query("SELECT repo_id FROM {versioncontrol_repositories}
                        WHERE vcs = 'cvs'");
    while ($repository = db_fetch_array($result)) {
      versioncontrol_delete_repository($repository);
    }
  }

  // Remove tables.
  drupal_uninstall_schema('versioncontrol_cvs');
}


// Update functions. To be named versioncontrol_cvs_update_xyzz(), where x is
// the major version of Drupal core, y is the major version of the CVS backend
// for this version of Drupal core, and zz is a consecutive number.

// versioncontrol_cvs_update_6() was the last update on Drupal 5.x (-2.x).

/**
 * Update 6100: Blah blah blah.
 */
/* function versioncontrol_cvs_update_6100() {
  $ret = array();
  $ret[] = update_sql('UPDATE {versioncontrol_cvs_blah} SET value = othervalue');
  return $ret;
}*/
