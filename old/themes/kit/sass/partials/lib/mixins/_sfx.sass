=gradient-bg($color, $top: 5, $bottom: $top)
  @if $top < 0 and $bottom < 0
    $color1: darken($color, abs($top))
    $color2: lighten($color, abs($bottom))
    +linear-gradient(color-stops($color1, $color2))
  @else
    $color1: lighten($color, abs($top))
    $color2: darken($color, abs($bottom))
    +linear-gradient(color-stops($color1, $color2))
  background-color: $color


// rotate a group of elements as if they were casually tossed on a table
=scatter($rotate: 2deg -3deg 1deg, $child: false)
  &:nth-of-type(2n+2)
    @if $child
      #{$child}
        +rotate(nth($rotate, 1))
    @else
      +rotate(nth($rotate, 1))
  &:nth-of-type(3n+3)
    @if $child
      #{$child}
        +rotate(nth($rotate, 2))
    @else
      +rotate(nth($rotate, 2))
  &:nth-of-type(5n+5)
    @if $child
      #{$child}
        +rotate(nth($rotate, 3))
    @else
      +rotate(nth($rotate, 3))

// css3 page curl effect
  page-curl(
    $position: top, right, bottom, left, top-left, top-right, bottom-right, bottom-left, top-left-bottom-right, top-right-bottom-left
    $shadow-color: color
    $box-shadow: true, false
    $rotate: xxdeg
=page-curl($position: bottom, $shadow-color: rgba($black, 0.7), $rotate: 6deg)
  $skew: 15deg
  display: block
  position: relative
  &:before, &:after
    position: absolute
    background: transparent
    width: 40%
    height: 20px
    content: "\0020"
  &:before
    z-index: -1
  &:after
    z-index: -2

  @if $position == top or $position == left or $position == top-left or $position == top-left-bottom-right
    &:before
      left: 0
      top: 0
      +transform-origin(0%, 0%)
      +transform2d( rotate($rotate) skew($skew) )

  @if $position == right or $position == top-right or $position == top-right-bottom-left
    &:before
      right: 0
      top: 0
      +transform-origin(100%, 0%)
      +transform2d( rotate($rotate * -1) skew($skew * -1) )

  @if $position == bottom or $position == bottom-left
    &:before
      left: 0
      bottom: 0
      +transform-origin(0%, 100%)
      +transform2d( rotate($rotate * -1) skew($skew * -1) )

  @if $position == bottom-right
    &:before
      right: 0
      bottom: 0
      +transform-origin(100%, 100%)
      +transform2d( rotate($rotate) skew($skew) )

  @if $position == top
    &:after
      right: 0
      top: 0
      +transform-origin(100%, 0%)
      +transform2d( rotate($rotate * -1) skew($skew * -1) )

  @if $position == right or $position == bottom or $position == top-left-bottom-right
    &:after
      right: 0
      bottom: 0
      +transform-origin(100%, 100%)
      +transform2d( rotate($rotate) skew($skew) )

  @if $position == left or $position == top-right-bottom-left
    &:after
      left: 0
      bottom: 0
      +transform-origin(0%, 100%)
      +transform2d( rotate($rotate * -1) skew($skew * -1) )

  @if $position == top
    &:before
      +box-shadow($shadow-color, 0px, -8px, 16px)
    &:after
      +box-shadow($shadow-color, 0px, -8px, 16px)

  @if $position == right
    &:before
      +box-shadow($shadow-color, 8px, 0px, 16px)
    &:after
      +box-shadow($shadow-color, 8px, 0px, 16px)

  @if $position == bottom
    &:before
      +box-shadow($shadow-color 0px 8px 16px)
    &:after
      +box-shadow($shadow-color 0px 8px 16px)

  @if $position == left
    &:before
      +box-shadow($shadow-color, -8px, 0px, 16px)
    &:after
      +box-shadow($shadow-color, -8px, 0px, 16px)

  @if $position == top-left
    &:before
      +box-shadow($shadow-color, 0px, -8px, 16px)

  @if $position == top-right
    &:before
      +box-shadow($shadow-color, 0px, -8px, 16px)

  @if $position == bottom-right
    &:before
      +box-shadow($shadow-color, 0px, 8px, 16px)

  @if $position == bottom-left
    &:before
      +box-shadow($shadow-color, 0px, 8px, 16px)

  @if $position == top-left-bottom-right
    &:before
      +box-shadow($shadow-color, 0px, -8px, 16px)
    &:after
      +box-shadow($shadow-color, 0px, 8px, 16px)

  @if $position == top-right-bottom-left
    &:before
      +box-shadow($shadow-color, 0px, -8px, 16px)
    &:after
      +box-shadow($shadow-color, 0px, 8px, 16px)


// CSS3 Tucked Corners effect
  inspired by http://css-tricks.com/snippets/css/tucked-corners/
  // expected markup:
  <div class="this-element-gets-top-corners">
    <span class="this-element-gets-bottom-corners"> <!-- Span used for bottom corners --></span>
  </div>
  Arguments:
  $tape: the background css property
  $inner-element: the selector for the inner element (for bottom corners)
=tucked-corners($tape: rgba(white, 0.5), $inner-element: 'span.tucked-corners')
  position: relative
  +box-sizing(border-box)
  &:after, &:before, #{$inner-element}:after, #{$inner-element}:before
    background: $tape
    content: ''
    height: 50px
    position: absolute
    width: 100px
    z-index: 10
    +box-shadow(rgba(black, 0.5) 0 6px 9px -8px)
  &:after
    top: -25px
    left: -50px
    +rotate(-45deg)
  &:before
    top: -25px
    right: -50px
    +rotate(45deg)
  #{$inner-element}
    display: block
    position: relative
    padding: 20px
    width: 100%
    +box-sizing(border-box)
    +box-shadow(rgba(black, 0.25) 0 0 10px 0 inset)
    &:after
      bottom: -25px
      left: -50px
      +rotate(-135deg)
    &:before
      bottom: -25px
      right: -50px
      +rotate(135deg)
